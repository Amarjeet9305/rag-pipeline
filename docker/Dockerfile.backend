# Use the official lightweight Python image
FROM python:3.11-slim

# Set environment variables for non-buffered output
ENV PYTHONUNBUFFERED 1
ENV FLASK_APP main.py

# Create the application directory inside the container
# This WORKDIR will be /app
WORKDIR /app

# Copy the requirements file from the host project root (../ requirements.txt 
# relative to the docker/ context, but Docker only uses the context root)
# Since the build context in docker-compose is `./docker`, 
# we need to assume requirements.txt is copied to that folder temporarily 
# or change the build context.
# A simpler and more robust way is to change the context to the project root.

# --- FIX: Assume requirements.txt is copied relative to the build context ---
# This assumes requirements.txt is available at the root level of your project (E:\GithubWorks\rag-pipeline)
COPY ../requirements.txt . 

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# The rest of the code is mounted via volumes defined in docker-compose.yml:
# - ../backend:/app

# Expose the port
EXPOSE 8000

# Command to run the Flask application using Gunicorn for production or flask run for development
# We will use the flask run command as it's simpler for this setup.
CMD ["python", "main.py"]
